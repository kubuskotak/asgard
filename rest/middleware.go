// Package rest is port adapter via http/s protocol
// # This manifest was generated by ymir. DO NOT EDIT.
package rest

import (
	"context"
	"net/http"
)

// ResponseConstraint is custom constraint type adapter response.
type ResponseConstraint interface {
	any
}

// Adapter is wrapper func type for error handler.
type Adapter[Response ResponseConstraint] func(w http.ResponseWriter, r *http.Request) (Response, error)

// HandlerAdapter is middleware handler to process error.
func HandlerAdapter[ResponseType ResponseConstraint](a Adapter[ResponseType]) *Response[ResponseType] {
	null := make(map[string]any)
	response := &Response[ResponseType]{
		Version: Version{
			Label:  "v1",
			Number: "0.1.0",
		},
		Data:       null,
		Pagination: Pagination{},
	}
	response.next = a
	return response
}

// SemanticVersion is middleware handler to semantic versioning.
func SemanticVersion(label string, version string) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			*r = *r.WithContext(context.WithValue(r.Context(), CtxVersion, Version{
				Label:  label,
				Number: version,
			}))
			next.ServeHTTP(w, r)
		})
	}
}
