// Package infrastructure is implements an adapter to talk to low-level modules.
// # This manifest was generated by ymir. DO NOT EDIT.
package infrastructure

import (
	"context"
	"time"

	"github.com/rs/zerolog/log"
	"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc"
	stdoutMetric "go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"
	"go.opentelemetry.io/otel/sdk/metric"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// MetricReturnFunc return type func with error.
type MetricReturnFunc func(ctx context.Context) error

// InitMetric create metric provider from collector exporter.
func InitMetric(exporter metric.Exporter) MetricReturnFunc {
	mp := metric.NewMeterProvider(metric.WithReader(metric.NewPeriodicReader(exporter)))
	otel.SetMeterProvider(mp)
	return func(ctx context.Context) error {
		return mp.Shutdown(ctx)
	}
}

// MetricExporter will push to the collector.
func MetricExporter(ctx context.Context,
	debug, enabled bool, addr string,
	timeout time.Duration) (metric.Exporter, error) {
	if debug {
		return stdoutMetric.New()
	}
	return GrpcMetricExporter(ctx, addr, timeout, enabled)
}

// GrpcMetricExporter is open connection to open telemetry collector.
func GrpcMetricExporter(ctx context.Context,
	addr string, timeout time.Duration, enabled bool) (metric.Exporter, error) {
	c, cancel := context.WithTimeout(ctx, timeout)
	defer cancel()
	var (
		err  error
		conn *grpc.ClientConn
	)
	if enabled {
		conn, err = grpc.DialContext(c, addr,
			grpc.WithTransportCredentials(insecure.NewCredentials()),
			grpc.WithUnaryInterceptor(otelgrpc.UnaryClientInterceptor()),
			grpc.WithStreamInterceptor(otelgrpc.StreamClientInterceptor()))
	} else {
		conn, err = grpc.DialContext(c, addr,
			grpc.WithTransportCredentials(insecure.NewCredentials()))
	}
	if err != nil {
		log.Error().Err(err).Msgf("exporter grpc: failed to connect %s", addr)
		return nil, err
	}
	return otlpmetricgrpc.New(ctx, otlpmetricgrpc.WithGRPCConn(conn))
}
